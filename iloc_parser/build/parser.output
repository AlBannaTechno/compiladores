Terminals unused in grammar

   rshifI
   cbr
   l


Rules useless in parser due to conflicts

    2 p0: $@1 p


State 4 conflicts: 1 shift/reduce


Grammar

    0 $accept: p0 add

    1 $@1: /* empty */

    2 p0: $@1 p

    3 p: p i
    4  | /* empty */

    5 i: i_2_1
    6  | i_1_1
    7  | i_1_2
    8  | i_0_1
    9  | i_2_0

   10 i_2_1: op r comma r to r
   11      | op r comma constant to r

   12 i_1_1: op r to r
   13      | op constant to r

   14 i_1_2: op r to r comma r

   15 i_0_1: op r

   16 i_2_0: op r comma r

   17 op: add
   18   | sub
   19   | mult
   20   | _div
   21   | inv
   22   | addI
   23   | subI
   24   | multI
   25   | divI
   26   | rdivI
   27   | and
   28   | andI
   29   | or
   30   | orI
   31   | xor
   32   | xorI
   33   | lshift
   34   | lshiftI
   35   | rshift
   36   | load
   37   | loadAI
   38   | loadA0
   39   | cload
   40   | cloadAI
   41   | cloadA0
   42   | store
   43   | storeAI
   44   | storeA0
   45   | cstore
   46   | cstoreAI
   47   | cstoreA0
   48   | i2i
   49   | c2c
   50   | c2i
   51   | i2c
   52   | cmp_LT
   53   | cmp_LE
   54   | cmp_EQ
   55   | cmp_GE
   56   | cmp_GT
   57   | cmp_NE
   58   | jump
   59   | jumpI
   60   | nop
   61   | tbl
   62   | loadI
   63   | inc
   64   | dec


Terminals, with rules where they appear

add (0) 0 17
sub (1) 18
mult (2) 19
_div (3) 20
inv (4) 21
addI (5) 22
subI (6) 23
multI (7) 24
divI (8) 25
rdivI (9) 26
and (10) 27
andI (11) 28
or (12) 29
orI (13) 30
xor (14) 31
xorI (15) 32
lshift (16) 33
rshift (17) 35
lshiftI (18) 34
rshifI (19)
load (20) 36
loadAI (21) 37
loadA0 (22) 38
loadI (23) 62
cload (24) 39
cloadAI (25) 40
cloadA0 (26) 41
store (27) 42
storeAI (28) 43
storeA0 (29) 44
cstore (30) 45
cstoreAI (31) 46
cstoreA0 (32) 47
i2i (33) 48
c2c (34) 49
c2i (35) 50
i2c (36) 51
cmp_LT (37) 52
cmp_LE (38) 53
cmp_EQ (39) 54
cmp_GE (40) 55
cmp_GT (41) 56
cmp_NE (42) 57
cbr (43)
jump (44) 58
jumpI (45) 59
nop (46) 60
tbl (47) 61
inc (48) 63
dec (49) 64
r (100) 10 11 12 13 14 15 16
l (101)
constant (102) 11 13
comma (103) 10 11 14 16
to (104) 10 11 12 13 14
error (256)


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
p0 (58)
    on left: 2, on right: 0
$@1 (59)
    on left: 1, on right: 2
p (60)
    on left: 3 4, on right: 2 3
i (61)
    on left: 5 6 7 8 9, on right: 3
i_2_1 (62)
    on left: 10 11, on right: 5
i_1_1 (63)
    on left: 12 13, on right: 6
i_1_2 (64)
    on left: 14, on right: 7
i_0_1 (65)
    on left: 15, on right: 8
i_2_0 (66)
    on left: 16, on right: 9
op (67)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
    35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55
    56 57 58 59 60 61 62 63 64, on right: 10 11 12 13 14 15 16


state 0

    0 $accept: . p0 add

    $default  reduce using rule 1 ($@1)

    p0   go to state 1
    $@1  go to state 2


state 1

    0 $accept: p0 . add

    add  shift, and go to state 3


state 2

    2 p0: $@1 . p

    $default  reduce using rule 4 (p)

    p  go to state 4


state 3

    0 $accept: p0 add .

    $default  accept


state 4

    2 p0: $@1 p .
    3 p: p . i

    add       shift, and go to state 5
    sub       shift, and go to state 6
    mult      shift, and go to state 7
    _div      shift, and go to state 8
    inv       shift, and go to state 9
    addI      shift, and go to state 10
    subI      shift, and go to state 11
    multI     shift, and go to state 12
    divI      shift, and go to state 13
    rdivI     shift, and go to state 14
    and       shift, and go to state 15
    andI      shift, and go to state 16
    or        shift, and go to state 17
    orI       shift, and go to state 18
    xor       shift, and go to state 19
    xorI      shift, and go to state 20
    lshift    shift, and go to state 21
    rshift    shift, and go to state 22
    lshiftI   shift, and go to state 23
    load      shift, and go to state 24
    loadAI    shift, and go to state 25
    loadA0    shift, and go to state 26
    loadI     shift, and go to state 27
    cload     shift, and go to state 28
    cloadAI   shift, and go to state 29
    cloadA0   shift, and go to state 30
    store     shift, and go to state 31
    storeAI   shift, and go to state 32
    storeA0   shift, and go to state 33
    cstore    shift, and go to state 34
    cstoreAI  shift, and go to state 35
    cstoreA0  shift, and go to state 36
    i2i       shift, and go to state 37
    c2c       shift, and go to state 38
    c2i       shift, and go to state 39
    i2c       shift, and go to state 40
    cmp_LT    shift, and go to state 41
    cmp_LE    shift, and go to state 42
    cmp_EQ    shift, and go to state 43
    cmp_GE    shift, and go to state 44
    cmp_GT    shift, and go to state 45
    cmp_NE    shift, and go to state 46
    jump      shift, and go to state 47
    jumpI     shift, and go to state 48
    nop       shift, and go to state 49
    tbl       shift, and go to state 50
    inc       shift, and go to state 51
    dec       shift, and go to state 52

    add  [reduce using rule 2 (p0)]

    i      go to state 53
    i_2_1  go to state 54
    i_1_1  go to state 55
    i_1_2  go to state 56
    i_0_1  go to state 57
    i_2_0  go to state 58
    op     go to state 59


state 5

   17 op: add .

    $default  reduce using rule 17 (op)


state 6

   18 op: sub .

    $default  reduce using rule 18 (op)


state 7

   19 op: mult .

    $default  reduce using rule 19 (op)


state 8

   20 op: _div .

    $default  reduce using rule 20 (op)


state 9

   21 op: inv .

    $default  reduce using rule 21 (op)


state 10

   22 op: addI .

    $default  reduce using rule 22 (op)


state 11

   23 op: subI .

    $default  reduce using rule 23 (op)


state 12

   24 op: multI .

    $default  reduce using rule 24 (op)


state 13

   25 op: divI .

    $default  reduce using rule 25 (op)


state 14

   26 op: rdivI .

    $default  reduce using rule 26 (op)


state 15

   27 op: and .

    $default  reduce using rule 27 (op)


state 16

   28 op: andI .

    $default  reduce using rule 28 (op)


state 17

   29 op: or .

    $default  reduce using rule 29 (op)


state 18

   30 op: orI .

    $default  reduce using rule 30 (op)


state 19

   31 op: xor .

    $default  reduce using rule 31 (op)


state 20

   32 op: xorI .

    $default  reduce using rule 32 (op)


state 21

   33 op: lshift .

    $default  reduce using rule 33 (op)


state 22

   35 op: rshift .

    $default  reduce using rule 35 (op)


state 23

   34 op: lshiftI .

    $default  reduce using rule 34 (op)


state 24

   36 op: load .

    $default  reduce using rule 36 (op)


state 25

   37 op: loadAI .

    $default  reduce using rule 37 (op)


state 26

   38 op: loadA0 .

    $default  reduce using rule 38 (op)


state 27

   62 op: loadI .

    $default  reduce using rule 62 (op)


state 28

   39 op: cload .

    $default  reduce using rule 39 (op)


state 29

   40 op: cloadAI .

    $default  reduce using rule 40 (op)


state 30

   41 op: cloadA0 .

    $default  reduce using rule 41 (op)


state 31

   42 op: store .

    $default  reduce using rule 42 (op)


state 32

   43 op: storeAI .

    $default  reduce using rule 43 (op)


state 33

   44 op: storeA0 .

    $default  reduce using rule 44 (op)


state 34

   45 op: cstore .

    $default  reduce using rule 45 (op)


state 35

   46 op: cstoreAI .

    $default  reduce using rule 46 (op)


state 36

   47 op: cstoreA0 .

    $default  reduce using rule 47 (op)


state 37

   48 op: i2i .

    $default  reduce using rule 48 (op)


state 38

   49 op: c2c .

    $default  reduce using rule 49 (op)


state 39

   50 op: c2i .

    $default  reduce using rule 50 (op)


state 40

   51 op: i2c .

    $default  reduce using rule 51 (op)


state 41

   52 op: cmp_LT .

    $default  reduce using rule 52 (op)


state 42

   53 op: cmp_LE .

    $default  reduce using rule 53 (op)


state 43

   54 op: cmp_EQ .

    $default  reduce using rule 54 (op)


state 44

   55 op: cmp_GE .

    $default  reduce using rule 55 (op)


state 45

   56 op: cmp_GT .

    $default  reduce using rule 56 (op)


state 46

   57 op: cmp_NE .

    $default  reduce using rule 57 (op)


state 47

   58 op: jump .

    $default  reduce using rule 58 (op)


state 48

   59 op: jumpI .

    $default  reduce using rule 59 (op)


state 49

   60 op: nop .

    $default  reduce using rule 60 (op)


state 50

   61 op: tbl .

    $default  reduce using rule 61 (op)


state 51

   63 op: inc .

    $default  reduce using rule 63 (op)


state 52

   64 op: dec .

    $default  reduce using rule 64 (op)


state 53

    3 p: p i .

    $default  reduce using rule 3 (p)


state 54

    5 i: i_2_1 .

    $default  reduce using rule 5 (i)


state 55

    6 i: i_1_1 .

    $default  reduce using rule 6 (i)


state 56

    7 i: i_1_2 .

    $default  reduce using rule 7 (i)


state 57

    8 i: i_0_1 .

    $default  reduce using rule 8 (i)


state 58

    9 i: i_2_0 .

    $default  reduce using rule 9 (i)


state 59

   10 i_2_1: op . r comma r to r
   11      | op . r comma constant to r
   12 i_1_1: op . r to r
   13      | op . constant to r
   14 i_1_2: op . r to r comma r
   15 i_0_1: op . r
   16 i_2_0: op . r comma r

    r         shift, and go to state 60
    constant  shift, and go to state 61


state 60

   10 i_2_1: op r . comma r to r
   11      | op r . comma constant to r
   12 i_1_1: op r . to r
   14 i_1_2: op r . to r comma r
   15 i_0_1: op r .
   16 i_2_0: op r . comma r

    comma  shift, and go to state 62
    to     shift, and go to state 63

    $default  reduce using rule 15 (i_0_1)


state 61

   13 i_1_1: op constant . to r

    to  shift, and go to state 64


state 62

   10 i_2_1: op r comma . r to r
   11      | op r comma . constant to r
   16 i_2_0: op r comma . r

    r         shift, and go to state 65
    constant  shift, and go to state 66


state 63

   12 i_1_1: op r to . r
   14 i_1_2: op r to . r comma r

    r  shift, and go to state 67


state 64

   13 i_1_1: op constant to . r

    r  shift, and go to state 68


state 65

   10 i_2_1: op r comma r . to r
   16 i_2_0: op r comma r .

    to  shift, and go to state 69

    $default  reduce using rule 16 (i_2_0)


state 66

   11 i_2_1: op r comma constant . to r

    to  shift, and go to state 70


state 67

   12 i_1_1: op r to r .
   14 i_1_2: op r to r . comma r

    comma  shift, and go to state 71

    $default  reduce using rule 12 (i_1_1)


state 68

   13 i_1_1: op constant to r .

    $default  reduce using rule 13 (i_1_1)


state 69

   10 i_2_1: op r comma r to . r

    r  shift, and go to state 72


state 70

   11 i_2_1: op r comma constant to . r

    r  shift, and go to state 73


state 71

   14 i_1_2: op r to r comma . r

    r  shift, and go to state 74


state 72

   10 i_2_1: op r comma r to r .

    $default  reduce using rule 10 (i_2_1)


state 73

   11 i_2_1: op r comma constant to r .

    $default  reduce using rule 11 (i_2_1)


state 74

   14 i_1_2: op r to r comma r .

    $default  reduce using rule 14 (i_1_2)
