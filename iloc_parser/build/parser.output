Terminals unused in grammar

   andI
   or
   orI
   xor
   xorI
   lshift
   rshift
   lshiftI
   rshifI
   load
   loadAI
   loadA0
   loadI
   cload
   cloadAI
   cloadA0
   store
   storeAI
   storeA0
   cstore
   cstoreAI
   cstoreA0
   i2i
   c2c
   c2i
   i2c
   cmp_LT
   cmp_LE
   cmp_EQ
   cmp_GE
   cmp_GT
   cmp_NE
   cbr
   jump
   jumpI
   nop
   tbl
   l


Rules useless in parser due to conflicts

    2 p0: $@1 p


State 4 conflicts: 1 shift/reduce


Grammar

    0 $accept: p0 add

    1 $@1: /* empty */

    2 p0: $@1 p

    3 p: p i
    4  | /* empty */

    5 i: i_2_1
    6  | i_1_1
    7  | i_1_2
    8  | i_0_1
    9  | i_2_0

   10 i_2_1: op r comma r to r

   11 i_1_1: op r to r

   12 i_1_2: op r to r comma r

   13 i_0_1: op r

   14 i_2_0: op r comma r

   15 op: add
   16   | sub
   17   | mult
   18   | _div
   19   | inv
   20   | addI
   21   | subI
   22   | multI
   23   | divI
   24   | rdivI
   25   | and


Terminals, with rules where they appear

add (0) 0 15
sub (1) 16
mult (2) 17
_div (3) 18
inv (4) 19
addI (5) 20
subI (6) 21
multI (7) 22
divI (8) 23
rdivI (9) 24
and (10) 25
andI (11)
or (12)
orI (13)
xor (14)
xorI (15)
lshift (16)
rshift (17)
lshiftI (18)
rshifI (19)
load (20)
loadAI (21)
loadA0 (22)
loadI (23)
cload (24)
cloadAI (25)
cloadA0 (26)
store (27)
storeAI (28)
storeA0 (29)
cstore (30)
cstoreAI (31)
cstoreA0 (32)
i2i (33)
c2c (34)
c2i (35)
i2c (36)
cmp_LT (37)
cmp_LE (38)
cmp_EQ (39)
cmp_GE (40)
cmp_GT (41)
cmp_NE (42)
cbr (43)
jump (44)
jumpI (45)
nop (46)
tbl (47)
r (48) 10 11 12 13 14
l (49)
comma (50) 10 12 14
to (51) 10 11 12
error (256)


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
p0 (55)
    on left: 2, on right: 0
$@1 (56)
    on left: 1, on right: 2
p (57)
    on left: 3 4, on right: 2 3
i (58)
    on left: 5 6 7 8 9, on right: 3
i_2_1 (59)
    on left: 10, on right: 5
i_1_1 (60)
    on left: 11, on right: 6
i_1_2 (61)
    on left: 12, on right: 7
i_0_1 (62)
    on left: 13, on right: 8
i_2_0 (63)
    on left: 14, on right: 9
op (64)
    on left: 15 16 17 18 19 20 21 22 23 24 25, on right: 10 11 12 13
    14


state 0

    0 $accept: . p0 add

    $default  reduce using rule 1 ($@1)

    p0   go to state 1
    $@1  go to state 2


state 1

    0 $accept: p0 . add

    add  shift, and go to state 3


state 2

    2 p0: $@1 . p

    $default  reduce using rule 4 (p)

    p  go to state 4


state 3

    0 $accept: p0 add .

    $default  accept


state 4

    2 p0: $@1 p .
    3 p: p . i

    add    shift, and go to state 5
    sub    shift, and go to state 6
    mult   shift, and go to state 7
    _div   shift, and go to state 8
    inv    shift, and go to state 9
    addI   shift, and go to state 10
    subI   shift, and go to state 11
    multI  shift, and go to state 12
    divI   shift, and go to state 13
    rdivI  shift, and go to state 14
    and    shift, and go to state 15

    add  [reduce using rule 2 (p0)]

    i      go to state 16
    i_2_1  go to state 17
    i_1_1  go to state 18
    i_1_2  go to state 19
    i_0_1  go to state 20
    i_2_0  go to state 21
    op     go to state 22


state 5

   15 op: add .

    $default  reduce using rule 15 (op)


state 6

   16 op: sub .

    $default  reduce using rule 16 (op)


state 7

   17 op: mult .

    $default  reduce using rule 17 (op)


state 8

   18 op: _div .

    $default  reduce using rule 18 (op)


state 9

   19 op: inv .

    $default  reduce using rule 19 (op)


state 10

   20 op: addI .

    $default  reduce using rule 20 (op)


state 11

   21 op: subI .

    $default  reduce using rule 21 (op)


state 12

   22 op: multI .

    $default  reduce using rule 22 (op)


state 13

   23 op: divI .

    $default  reduce using rule 23 (op)


state 14

   24 op: rdivI .

    $default  reduce using rule 24 (op)


state 15

   25 op: and .

    $default  reduce using rule 25 (op)


state 16

    3 p: p i .

    $default  reduce using rule 3 (p)


state 17

    5 i: i_2_1 .

    $default  reduce using rule 5 (i)


state 18

    6 i: i_1_1 .

    $default  reduce using rule 6 (i)


state 19

    7 i: i_1_2 .

    $default  reduce using rule 7 (i)


state 20

    8 i: i_0_1 .

    $default  reduce using rule 8 (i)


state 21

    9 i: i_2_0 .

    $default  reduce using rule 9 (i)


state 22

   10 i_2_1: op . r comma r to r
   11 i_1_1: op . r to r
   12 i_1_2: op . r to r comma r
   13 i_0_1: op . r
   14 i_2_0: op . r comma r

    r  shift, and go to state 23


state 23

   10 i_2_1: op r . comma r to r
   11 i_1_1: op r . to r
   12 i_1_2: op r . to r comma r
   13 i_0_1: op r .
   14 i_2_0: op r . comma r

    comma  shift, and go to state 24
    to     shift, and go to state 25

    $default  reduce using rule 13 (i_0_1)


state 24

   10 i_2_1: op r comma . r to r
   14 i_2_0: op r comma . r

    r  shift, and go to state 26


state 25

   11 i_1_1: op r to . r
   12 i_1_2: op r to . r comma r

    r  shift, and go to state 27


state 26

   10 i_2_1: op r comma r . to r
   14 i_2_0: op r comma r .

    to  shift, and go to state 28

    $default  reduce using rule 14 (i_2_0)


state 27

   11 i_1_1: op r to r .
   12 i_1_2: op r to r . comma r

    comma  shift, and go to state 29

    $default  reduce using rule 11 (i_1_1)


state 28

   10 i_2_1: op r comma r to . r

    r  shift, and go to state 30


state 29

   12 i_1_2: op r to r comma . r

    r  shift, and go to state 31


state 30

   10 i_2_1: op r comma r to r .

    $default  reduce using rule 10 (i_2_1)


state 31

   12 i_1_2: op r to r comma r .

    $default  reduce using rule 12 (i_1_2)
